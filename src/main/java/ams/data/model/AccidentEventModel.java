/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ams.data.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AccidentEventModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4638460027340873913L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccidentEventModel\",\"namespace\":\"ams.data.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"AccidentType\",\"symbols\":[\"CRIMINAL\",\"CAR_ACCIDENT\",\"OTHER_ACCIDENT\",\"FIRE_ACCIDENT\"]}},{\"name\":\"date\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"string\"},{\"name\":\"longitude\",\"type\":\"string\"}]}},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"cacheId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<AccidentEventModel> ENCODER =
      new BinaryMessageEncoder<AccidentEventModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AccidentEventModel> DECODER =
      new BinaryMessageDecoder<AccidentEventModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AccidentEventModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AccidentEventModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AccidentEventModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AccidentEventModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AccidentEventModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AccidentEventModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AccidentEventModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AccidentEventModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private ams.data.model.AccidentType type;
  private java.time.LocalDate date;
  private ams.data.model.Location location;
  private java.lang.CharSequence description;
  private java.lang.CharSequence cacheId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccidentEventModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param type The new value for type
   * @param date The new value for date
   * @param location The new value for location
   * @param description The new value for description
   * @param cacheId The new value for cacheId
   */
  public AccidentEventModel(java.lang.Long id, ams.data.model.AccidentType type, java.time.LocalDate date, ams.data.model.Location location, java.lang.CharSequence description, java.lang.CharSequence cacheId) {
    this.id = id;
    this.type = type;
    this.date = date;
    this.location = location;
    this.description = description;
    this.cacheId = cacheId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return type;
    case 2: return date;
    case 3: return location;
    case 4: return description;
    case 5: return cacheId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: type = (ams.data.model.AccidentType)value$; break;
    case 2: date = (java.time.LocalDate)value$; break;
    case 3: location = (ams.data.model.Location)value$; break;
    case 4: description = (java.lang.CharSequence)value$; break;
    case 5: cacheId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public ams.data.model.AccidentType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(ams.data.model.AccidentType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.time.LocalDate getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.time.LocalDate value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public ams.data.model.Location getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(ams.data.model.Location value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'cacheId' field.
   * @return The value of the 'cacheId' field.
   */
  public java.lang.CharSequence getCacheId() {
    return cacheId;
  }


  /**
   * Sets the value of the 'cacheId' field.
   * @param value the value to set.
   */
  public void setCacheId(java.lang.CharSequence value) {
    this.cacheId = value;
  }

  /**
   * Creates a new AccidentEventModel RecordBuilder.
   * @return A new AccidentEventModel RecordBuilder
   */
  public static ams.data.model.AccidentEventModel.Builder newBuilder() {
    return new ams.data.model.AccidentEventModel.Builder();
  }

  /**
   * Creates a new AccidentEventModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccidentEventModel RecordBuilder
   */
  public static ams.data.model.AccidentEventModel.Builder newBuilder(ams.data.model.AccidentEventModel.Builder other) {
    if (other == null) {
      return new ams.data.model.AccidentEventModel.Builder();
    } else {
      return new ams.data.model.AccidentEventModel.Builder(other);
    }
  }

  /**
   * Creates a new AccidentEventModel RecordBuilder by copying an existing AccidentEventModel instance.
   * @param other The existing instance to copy.
   * @return A new AccidentEventModel RecordBuilder
   */
  public static ams.data.model.AccidentEventModel.Builder newBuilder(ams.data.model.AccidentEventModel other) {
    if (other == null) {
      return new ams.data.model.AccidentEventModel.Builder();
    } else {
      return new ams.data.model.AccidentEventModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for AccidentEventModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccidentEventModel>
    implements org.apache.avro.data.RecordBuilder<AccidentEventModel> {

    private long id;
    private ams.data.model.AccidentType type;
    private java.time.LocalDate date;
    private ams.data.model.Location location;
    private ams.data.model.Location.Builder locationBuilder;
    private java.lang.CharSequence description;
    private java.lang.CharSequence cacheId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ams.data.model.AccidentEventModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.location)) {
        this.location = data().deepCopy(fields()[3].schema(), other.location);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = ams.data.model.Location.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.cacheId)) {
        this.cacheId = data().deepCopy(fields()[5].schema(), other.cacheId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing AccidentEventModel instance
     * @param other The existing instance to copy.
     */
    private Builder(ams.data.model.AccidentEventModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.date)) {
        this.date = data().deepCopy(fields()[2].schema(), other.date);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.location)) {
        this.location = data().deepCopy(fields()[3].schema(), other.location);
        fieldSetFlags()[3] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cacheId)) {
        this.cacheId = data().deepCopy(fields()[5].schema(), other.cacheId);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public ams.data.model.AccidentType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder setType(ams.data.model.AccidentType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.time.LocalDate getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder setDate(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.date = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder clearDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public ams.data.model.Location getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder setLocation(ams.data.model.Location value) {
      validate(fields()[3], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public ams.data.model.Location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(ams.data.model.Location.newBuilder(location));
        } else {
          setLocationBuilder(ams.data.model.Location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public ams.data.model.AccidentEventModel.Builder setLocationBuilder(ams.data.model.Location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'cacheId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCacheId() {
      return cacheId;
    }


    /**
      * Sets the value of the 'cacheId' field.
      * @param value The value of 'cacheId'.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder setCacheId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.cacheId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'cacheId' field has been set.
      * @return True if the 'cacheId' field has been set, false otherwise.
      */
    public boolean hasCacheId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'cacheId' field.
      * @return This builder.
      */
    public ams.data.model.AccidentEventModel.Builder clearCacheId() {
      cacheId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AccidentEventModel build() {
      try {
        AccidentEventModel record = new AccidentEventModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (ams.data.model.AccidentType) defaultValue(fields()[1]);
        record.date = fieldSetFlags()[2] ? this.date : (java.time.LocalDate) defaultValue(fields()[2]);
        if (locationBuilder != null) {
          try {
            record.location = this.locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("location"));
            throw e;
          }
        } else {
          record.location = fieldSetFlags()[3] ? this.location : (ams.data.model.Location) defaultValue(fields()[3]);
        }
        record.description = fieldSetFlags()[4] ? this.description : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.cacheId = fieldSetFlags()[5] ? this.cacheId : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AccidentEventModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<AccidentEventModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AccidentEventModel>
    READER$ = (org.apache.avro.io.DatumReader<AccidentEventModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










