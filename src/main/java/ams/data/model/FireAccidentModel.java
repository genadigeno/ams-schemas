/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ams.data.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FireAccidentModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2641896428122230340L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FireAccidentModel\",\"namespace\":\"ams.data.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"date\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"latitude\",\"type\":\"string\"},{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"longitude\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"cacheId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<FireAccidentModel> ENCODER =
      new BinaryMessageEncoder<FireAccidentModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FireAccidentModel> DECODER =
      new BinaryMessageDecoder<FireAccidentModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FireAccidentModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FireAccidentModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FireAccidentModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FireAccidentModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FireAccidentModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FireAccidentModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FireAccidentModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FireAccidentModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private java.time.LocalDate date;
  private java.lang.CharSequence latitude;
  private java.lang.CharSequence address;
  private java.lang.CharSequence longitude;
  private java.lang.CharSequence description;
  private java.lang.CharSequence cacheId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FireAccidentModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param date The new value for date
   * @param latitude The new value for latitude
   * @param address The new value for address
   * @param longitude The new value for longitude
   * @param description The new value for description
   * @param cacheId The new value for cacheId
   */
  public FireAccidentModel(java.lang.Long id, java.time.LocalDate date, java.lang.CharSequence latitude, java.lang.CharSequence address, java.lang.CharSequence longitude, java.lang.CharSequence description, java.lang.CharSequence cacheId) {
    this.id = id;
    this.date = date;
    this.latitude = latitude;
    this.address = address;
    this.longitude = longitude;
    this.description = description;
    this.cacheId = cacheId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return date;
    case 2: return latitude;
    case 3: return address;
    case 4: return longitude;
    case 5: return description;
    case 6: return cacheId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: date = (java.time.LocalDate)value$; break;
    case 2: latitude = (java.lang.CharSequence)value$; break;
    case 3: address = (java.lang.CharSequence)value$; break;
    case 4: longitude = (java.lang.CharSequence)value$; break;
    case 5: description = (java.lang.CharSequence)value$; break;
    case 6: cacheId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.time.LocalDate getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.time.LocalDate value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.CharSequence getLatitude() {
    return latitude;
  }


  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.CharSequence value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.CharSequence getLongitude() {
    return longitude;
  }


  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.CharSequence value) {
    this.longitude = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'cacheId' field.
   * @return The value of the 'cacheId' field.
   */
  public java.lang.CharSequence getCacheId() {
    return cacheId;
  }


  /**
   * Sets the value of the 'cacheId' field.
   * @param value the value to set.
   */
  public void setCacheId(java.lang.CharSequence value) {
    this.cacheId = value;
  }

  /**
   * Creates a new FireAccidentModel RecordBuilder.
   * @return A new FireAccidentModel RecordBuilder
   */
  public static ams.data.model.FireAccidentModel.Builder newBuilder() {
    return new ams.data.model.FireAccidentModel.Builder();
  }

  /**
   * Creates a new FireAccidentModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FireAccidentModel RecordBuilder
   */
  public static ams.data.model.FireAccidentModel.Builder newBuilder(ams.data.model.FireAccidentModel.Builder other) {
    if (other == null) {
      return new ams.data.model.FireAccidentModel.Builder();
    } else {
      return new ams.data.model.FireAccidentModel.Builder(other);
    }
  }

  /**
   * Creates a new FireAccidentModel RecordBuilder by copying an existing FireAccidentModel instance.
   * @param other The existing instance to copy.
   * @return A new FireAccidentModel RecordBuilder
   */
  public static ams.data.model.FireAccidentModel.Builder newBuilder(ams.data.model.FireAccidentModel other) {
    if (other == null) {
      return new ams.data.model.FireAccidentModel.Builder();
    } else {
      return new ams.data.model.FireAccidentModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for FireAccidentModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FireAccidentModel>
    implements org.apache.avro.data.RecordBuilder<FireAccidentModel> {

    private long id;
    private java.time.LocalDate date;
    private java.lang.CharSequence latitude;
    private java.lang.CharSequence address;
    private java.lang.CharSequence longitude;
    private java.lang.CharSequence description;
    private java.lang.CharSequence cacheId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ams.data.model.FireAccidentModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.cacheId)) {
        this.cacheId = data().deepCopy(fields()[6].schema(), other.cacheId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing FireAccidentModel instance
     * @param other The existing instance to copy.
     */
    private Builder(ams.data.model.FireAccidentModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.latitude)) {
        this.latitude = data().deepCopy(fields()[2].schema(), other.latitude);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.address)) {
        this.address = data().deepCopy(fields()[3].schema(), other.address);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longitude)) {
        this.longitude = data().deepCopy(fields()[4].schema(), other.longitude);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.cacheId)) {
        this.cacheId = data().deepCopy(fields()[6].schema(), other.cacheId);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.time.LocalDate getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder setDate(java.time.LocalDate value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder clearDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLatitude() {
      return latitude;
    }


    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder setLatitude(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.latitude = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.address = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder clearAddress() {
      address = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLongitude() {
      return longitude;
    }


    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder setLongitude(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.longitude = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.description = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder clearDescription() {
      description = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'cacheId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCacheId() {
      return cacheId;
    }


    /**
      * Sets the value of the 'cacheId' field.
      * @param value The value of 'cacheId'.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder setCacheId(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.cacheId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'cacheId' field has been set.
      * @return True if the 'cacheId' field has been set, false otherwise.
      */
    public boolean hasCacheId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'cacheId' field.
      * @return This builder.
      */
    public ams.data.model.FireAccidentModel.Builder clearCacheId() {
      cacheId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FireAccidentModel build() {
      try {
        FireAccidentModel record = new FireAccidentModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.time.LocalDate) defaultValue(fields()[1]);
        record.latitude = fieldSetFlags()[2] ? this.latitude : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.address = fieldSetFlags()[3] ? this.address : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.longitude = fieldSetFlags()[4] ? this.longitude : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.description = fieldSetFlags()[5] ? this.description : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.cacheId = fieldSetFlags()[6] ? this.cacheId : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FireAccidentModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<FireAccidentModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FireAccidentModel>
    READER$ = (org.apache.avro.io.DatumReader<FireAccidentModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










