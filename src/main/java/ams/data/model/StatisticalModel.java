/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ams.data.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StatisticalModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1776678110941321738L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StatisticalModel\",\"namespace\":\"ams.data.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"AccidentType\",\"symbols\":[\"CRIMINAL\",\"CAR_ACCIDENT\",\"OTHER_ACCIDENT\",\"FIRE_ACCIDENT\"]}},{\"name\":\"from\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}},{\"name\":\"end\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}},{\"name\":\"count\",\"type\":\"long\"},{\"name\":\"cacheId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<StatisticalModel> ENCODER =
      new BinaryMessageEncoder<StatisticalModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StatisticalModel> DECODER =
      new BinaryMessageDecoder<StatisticalModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StatisticalModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StatisticalModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StatisticalModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StatisticalModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StatisticalModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StatisticalModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StatisticalModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StatisticalModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long id;
  private ams.data.model.AccidentType type;
  private java.time.LocalDateTime from;
  private java.time.LocalDateTime end;
  private long count;
  private java.lang.CharSequence cacheId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StatisticalModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param type The new value for type
   * @param from The new value for from
   * @param end The new value for end
   * @param count The new value for count
   * @param cacheId The new value for cacheId
   */
  public StatisticalModel(java.lang.Long id, ams.data.model.AccidentType type, java.time.LocalDateTime from, java.time.LocalDateTime end, java.lang.Long count, java.lang.CharSequence cacheId) {
    this.id = id;
    this.type = type;
    this.from = from;
    this.end = end;
    this.count = count;
    this.cacheId = cacheId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return type;
    case 2: return from;
    case 3: return end;
    case 4: return count;
    case 5: return cacheId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: type = (ams.data.model.AccidentType)value$; break;
    case 2: from = (java.time.LocalDateTime)value$; break;
    case 3: end = (java.time.LocalDateTime)value$; break;
    case 4: count = (java.lang.Long)value$; break;
    case 5: cacheId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public ams.data.model.AccidentType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(ams.data.model.AccidentType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return The value of the 'from' field.
   */
  public java.time.LocalDateTime getFrom() {
    return from;
  }


  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(java.time.LocalDateTime value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'end' field.
   * @return The value of the 'end' field.
   */
  public java.time.LocalDateTime getEnd() {
    return end;
  }


  /**
   * Sets the value of the 'end' field.
   * @param value the value to set.
   */
  public void setEnd(java.time.LocalDateTime value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public long getCount() {
    return count;
  }


  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(long value) {
    this.count = value;
  }

  /**
   * Gets the value of the 'cacheId' field.
   * @return The value of the 'cacheId' field.
   */
  public java.lang.CharSequence getCacheId() {
    return cacheId;
  }


  /**
   * Sets the value of the 'cacheId' field.
   * @param value the value to set.
   */
  public void setCacheId(java.lang.CharSequence value) {
    this.cacheId = value;
  }

  /**
   * Creates a new StatisticalModel RecordBuilder.
   * @return A new StatisticalModel RecordBuilder
   */
  public static ams.data.model.StatisticalModel.Builder newBuilder() {
    return new ams.data.model.StatisticalModel.Builder();
  }

  /**
   * Creates a new StatisticalModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StatisticalModel RecordBuilder
   */
  public static ams.data.model.StatisticalModel.Builder newBuilder(ams.data.model.StatisticalModel.Builder other) {
    if (other == null) {
      return new ams.data.model.StatisticalModel.Builder();
    } else {
      return new ams.data.model.StatisticalModel.Builder(other);
    }
  }

  /**
   * Creates a new StatisticalModel RecordBuilder by copying an existing StatisticalModel instance.
   * @param other The existing instance to copy.
   * @return A new StatisticalModel RecordBuilder
   */
  public static ams.data.model.StatisticalModel.Builder newBuilder(ams.data.model.StatisticalModel other) {
    if (other == null) {
      return new ams.data.model.StatisticalModel.Builder();
    } else {
      return new ams.data.model.StatisticalModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for StatisticalModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StatisticalModel>
    implements org.apache.avro.data.RecordBuilder<StatisticalModel> {

    private long id;
    private ams.data.model.AccidentType type;
    private java.time.LocalDateTime from;
    private java.time.LocalDateTime end;
    private long count;
    private java.lang.CharSequence cacheId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ams.data.model.StatisticalModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.from)) {
        this.from = data().deepCopy(fields()[2].schema(), other.from);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.end)) {
        this.end = data().deepCopy(fields()[3].schema(), other.end);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.count)) {
        this.count = data().deepCopy(fields()[4].schema(), other.count);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.cacheId)) {
        this.cacheId = data().deepCopy(fields()[5].schema(), other.cacheId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing StatisticalModel instance
     * @param other The existing instance to copy.
     */
    private Builder(ams.data.model.StatisticalModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.from)) {
        this.from = data().deepCopy(fields()[2].schema(), other.from);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.end)) {
        this.end = data().deepCopy(fields()[3].schema(), other.end);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.count)) {
        this.count = data().deepCopy(fields()[4].schema(), other.count);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.cacheId)) {
        this.cacheId = data().deepCopy(fields()[5].schema(), other.cacheId);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public ams.data.model.AccidentType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder setType(ams.data.model.AccidentType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * @return The value.
      */
    public java.time.LocalDateTime getFrom() {
      return from;
    }


    /**
      * Sets the value of the 'from' field.
      * @param value The value of 'from'.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder setFrom(java.time.LocalDateTime value) {
      validate(fields()[2], value);
      this.from = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'from' field.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder clearFrom() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'end' field.
      * @return The value.
      */
    public java.time.LocalDateTime getEnd() {
      return end;
    }


    /**
      * Sets the value of the 'end' field.
      * @param value The value of 'end'.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder setEnd(java.time.LocalDateTime value) {
      validate(fields()[3], value);
      this.end = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'end' field has been set.
      * @return True if the 'end' field has been set, false otherwise.
      */
    public boolean hasEnd() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'end' field.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder clearEnd() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public long getCount() {
      return count;
    }


    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder setCount(long value) {
      validate(fields()[4], value);
      this.count = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder clearCount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'cacheId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCacheId() {
      return cacheId;
    }


    /**
      * Sets the value of the 'cacheId' field.
      * @param value The value of 'cacheId'.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder setCacheId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.cacheId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'cacheId' field has been set.
      * @return True if the 'cacheId' field has been set, false otherwise.
      */
    public boolean hasCacheId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'cacheId' field.
      * @return This builder.
      */
    public ams.data.model.StatisticalModel.Builder clearCacheId() {
      cacheId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StatisticalModel build() {
      try {
        StatisticalModel record = new StatisticalModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (ams.data.model.AccidentType) defaultValue(fields()[1]);
        record.from = fieldSetFlags()[2] ? this.from : (java.time.LocalDateTime) defaultValue(fields()[2]);
        record.end = fieldSetFlags()[3] ? this.end : (java.time.LocalDateTime) defaultValue(fields()[3]);
        record.count = fieldSetFlags()[4] ? this.count : (java.lang.Long) defaultValue(fields()[4]);
        record.cacheId = fieldSetFlags()[5] ? this.cacheId : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StatisticalModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<StatisticalModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StatisticalModel>
    READER$ = (org.apache.avro.io.DatumReader<StatisticalModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










